/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package com.netease.regular.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.netease.regular.lang.psi.RegularTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>_RegularLexer.flex</tt>
 */
public class _RegularLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int YYCONTENT = 2;
  public static final int YYTAG = 4;
  public static final int YYCOMMENT = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\4\1\2\1\1\1\5\1\3\22\0\1\4\1\13\1\6\1\22\1\11\1\50\1\0\1\45\1\53\1"+
    "\54\1\47\1\46\1\51\1\14\1\21\1\23\12\10\1\52\1\0\1\12\1\43\1\15\1\0\1\34\6"+
    "\11\1\64\1\11\1\62\4\11\1\63\3\11\1\61\1\57\1\60\6\11\1\17\1\44\1\20\1\0\1"+
    "\11\1\0\1\33\1\35\1\55\1\56\1\26\1\25\1\11\1\37\1\24\2\11\1\27\1\11\1\40\3"+
    "\11\1\42\1\30\1\32\1\41\3\11\1\36\1\11\1\7\1\31\1\16\7\0\1\1\242\0\2\1\26"+
    "\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\2\2\1\3\1\1\1\4\2\5\1\4"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\4\4\10\1\16\2\10\1\17\2\10\1\20\1\4"+
    "\1\21\2\4\1\22\1\23\1\24\1\25\1\10\1\26"+
    "\2\2\1\26\2\4\2\0\1\27\1\0\1\30\1\31"+
    "\1\32\1\33\1\34\6\10\1\35\1\36\1\10\1\37"+
    "\2\0\1\40\1\41\1\42\1\10\1\43\1\26\4\0"+
    "\7\10\1\44\1\10\1\26\1\45\1\46\2\10\1\47"+
    "\1\50\1\51\1\52\1\53\1\10\1\43\1\10\1\54"+
    "\2\10\1\26\1\10\1\55\1\27\1\56";

  private static int [] zzUnpackAction() {
    int [] result = new int[109];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\324\0\324\0\u0109\0\324"+
    "\0\u013e\0\324\0\324\0\u0173\0\u01a8\0\u01dd\0\u0212\0\u0247"+
    "\0\u027c\0\324\0\324\0\324\0\324\0\u02b1\0\u02e6\0\u031b"+
    "\0\u0350\0\u0385\0\324\0\u03ba\0\u03ef\0\324\0\u0424\0\u0459"+
    "\0\u048e\0\u04c3\0\u04f8\0\u052d\0\u0562\0\324\0\324\0\324"+
    "\0\324\0\u0597\0\u05cc\0\u05cc\0\u0601\0\u0636\0\u066b\0\u06a0"+
    "\0\u06d5\0\u01a8\0\324\0\u070a\0\324\0\324\0\324\0\324"+
    "\0\u0247\0\u073f\0\u0774\0\u07a9\0\u07de\0\u0813\0\u0848\0\u0247"+
    "\0\u0247\0\u087d\0\u08b2\0\u04c3\0\u08e7\0\324\0\324\0\324"+
    "\0\u091c\0\324\0\u0951\0\u066b\0\u06a0\0\u0986\0\u09bb\0\u09f0"+
    "\0\u0a25\0\u0a5a\0\u0a8f\0\u0ac4\0\u0af9\0\u0b2e\0\324\0\u0b63"+
    "\0\u0b98\0\324\0\324\0\u0bcd\0\u0c02\0\u0c37\0\u0247\0\u0247"+
    "\0\u0247\0\u0247\0\u0c6c\0\u0ca1\0\u0cd6\0\u0247\0\u0d0b\0\u0d40"+
    "\0\u0ca1\0\u0d75\0\u0247\0\u0247\0\u0247";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[109];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\5\1\6\1\7\2\6\1\5\1\10\2\5\1\11"+
    "\52\5\2\12\1\13\1\14\2\13\1\15\1\16\1\17"+
    "\1\20\2\12\1\21\1\12\1\22\1\23\1\24\1\25"+
    "\1\12\1\26\1\27\1\30\1\31\1\32\1\20\1\33"+
    "\1\34\1\35\1\36\1\37\2\20\1\40\2\20\1\41"+
    "\1\12\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\2\20\1\52\5\20\2\53\1\54\1\55\2\54"+
    "\1\53\1\10\2\53\1\56\52\53\14\57\1\60\50\57"+
    "\67\0\1\6\75\0\1\61\53\0\1\13\62\0\6\62"+
    "\1\63\35\62\1\64\20\62\22\0\1\65\1\66\51\0"+
    "\1\17\64\0\2\20\12\0\5\20\1\0\2\20\1\0"+
    "\6\20\12\0\10\20\43\0\1\67\64\0\1\70\31\0"+
    "\2\20\12\0\1\20\1\71\3\20\1\0\2\20\1\0"+
    "\3\20\1\72\2\20\12\0\10\20\10\0\2\20\12\0"+
    "\5\20\1\0\1\20\1\73\1\0\6\20\12\0\10\20"+
    "\10\0\2\20\12\0\3\20\1\74\1\20\1\0\2\20"+
    "\1\0\6\20\12\0\10\20\10\0\2\20\12\0\1\75"+
    "\4\20\1\0\2\20\1\0\6\20\12\0\10\20\10\0"+
    "\2\20\12\0\5\20\1\0\2\20\1\0\2\20\1\76"+
    "\2\20\1\77\12\0\10\20\10\0\2\20\12\0\4\20"+
    "\1\100\1\0\2\20\1\0\6\20\12\0\10\20\10\0"+
    "\2\20\12\0\5\20\1\0\2\20\1\0\1\20\1\101"+
    "\4\20\12\0\10\20\10\0\2\20\12\0\5\20\1\0"+
    "\2\20\1\0\4\20\1\102\1\20\12\0\10\20\43\0"+
    "\1\103\21\0\44\104\1\105\1\63\17\104\43\0\1\106"+
    "\64\0\1\107\64\0\1\110\31\0\2\20\12\0\5\20"+
    "\1\0\2\20\1\0\6\20\12\0\3\20\1\111\4\20"+
    "\7\53\1\112\2\53\1\56\54\53\1\54\4\53\1\112"+
    "\2\53\1\56\61\53\1\112\2\53\1\56\1\113\51\53"+
    "\14\114\1\115\64\114\1\116\50\114\14\0\1\117\50\0"+
    "\1\62\3\0\1\62\1\0\57\62\10\0\2\20\12\0"+
    "\5\20\1\0\2\20\1\0\6\20\12\0\1\120\7\20"+
    "\10\0\2\20\12\0\3\20\1\121\1\20\1\0\2\20"+
    "\1\0\6\20\12\0\10\20\10\0\2\20\12\0\4\20"+
    "\1\122\1\0\2\20\1\0\6\20\12\0\10\20\10\0"+
    "\2\20\12\0\4\20\1\123\1\0\2\20\1\0\6\20"+
    "\12\0\10\20\10\0\2\20\12\0\1\124\4\20\1\0"+
    "\2\20\1\0\6\20\12\0\10\20\10\0\2\20\12\0"+
    "\5\20\1\0\2\20\1\0\4\20\1\125\1\20\12\0"+
    "\10\20\10\0\2\20\12\0\3\20\1\126\1\20\1\0"+
    "\2\20\1\0\6\20\12\0\10\20\43\0\1\127\21\0"+
    "\1\104\3\0\1\104\1\0\57\104\10\0\2\20\12\0"+
    "\5\20\1\0\2\20\1\0\6\20\12\0\4\20\1\130"+
    "\3\20\7\53\1\112\2\53\1\56\1\53\1\131\50\53"+
    "\14\114\1\116\1\132\47\114\14\0\1\133\60\0\2\20"+
    "\12\0\3\20\1\134\1\20\1\0\2\20\1\0\6\20"+
    "\12\0\10\20\10\0\2\20\12\0\4\20\1\135\1\0"+
    "\2\20\1\0\6\20\12\0\10\20\10\0\2\20\12\0"+
    "\2\20\1\136\2\20\1\0\2\20\1\0\6\20\12\0"+
    "\10\20\10\0\2\20\12\0\5\20\1\0\1\137\1\20"+
    "\1\0\6\20\12\0\10\20\10\0\2\20\12\0\4\20"+
    "\1\140\1\0\2\20\1\0\6\20\12\0\10\20\10\0"+
    "\2\20\12\0\2\20\1\141\2\20\1\0\2\20\1\0"+
    "\6\20\12\0\10\20\10\0\2\20\12\0\3\20\1\142"+
    "\1\20\1\0\2\20\1\0\6\20\12\0\10\20\10\0"+
    "\2\20\12\0\5\20\1\0\2\20\1\0\6\20\12\0"+
    "\5\20\1\143\2\20\7\53\1\112\2\53\1\56\1\53"+
    "\1\144\50\53\10\0\2\20\12\0\5\20\1\0\2\20"+
    "\1\0\4\20\1\145\1\20\12\0\10\20\10\0\2\20"+
    "\12\0\2\20\1\146\2\20\1\0\2\20\1\0\6\20"+
    "\12\0\10\20\10\0\2\20\12\0\1\147\4\20\1\0"+
    "\2\20\1\0\6\20\12\0\10\20\10\0\2\20\12\0"+
    "\5\20\1\0\2\20\1\0\6\20\12\0\6\20\1\150"+
    "\1\20\7\151\1\0\55\151\10\0\2\20\12\0\5\20"+
    "\1\0\2\20\1\0\6\20\12\0\1\20\1\152\6\20"+
    "\10\0\2\20\12\0\1\20\1\153\3\20\1\0\2\20"+
    "\1\0\6\20\12\0\10\20\10\0\2\20\12\0\5\20"+
    "\1\0\2\20\1\0\6\20\12\0\7\20\1\154\10\0"+
    "\2\20\12\0\2\20\1\155\2\20\1\0\2\20\1\0"+
    "\6\20\12\0\10\20";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3498];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\2\11\1\1\1\11\1\1\2\11\6\1\4\11"+
    "\5\1\1\11\2\1\1\11\7\1\4\11\7\1\2\0"+
    "\1\11\1\0\4\11\13\1\2\0\3\11\1\1\1\11"+
    "\1\1\4\0\7\1\1\11\2\1\2\11\22\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[109];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  StringBuffer string = new StringBuffer();

  public _RegularLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _RegularLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { yypushback(1); yybegin(YYTAG);
            }
          case 47: break;
          case 2: 
            { 
            }
          case 48: break;
          case 3: 
            { yypushback(1); yybegin(YYCONTENT);
            }
          case 49: break;
          case 4: 
            { return BAD_CHARACTER;
            }
          case 50: break;
          case 5: 
            { return WHITE_SPACE;
            }
          case 51: break;
          case 6: 
            { return LBRACE;
            }
          case 52: break;
          case 7: 
            { return NUMBER;
            }
          case 53: break;
          case 8: 
            { return ID;
            }
          case 54: break;
          case 9: 
            { return SUB;
            }
          case 55: break;
          case 10: 
            { yybegin(YYINITIAL); return RBRACE;
            }
          case 56: break;
          case 11: 
            { return LBRAKET;
            }
          case 57: break;
          case 12: 
            { return RBRAKET;
            }
          case 58: break;
          case 13: 
            { return DOT;
            }
          case 59: break;
          case 14: 
            { return FILTEROP;
            }
          case 60: break;
          case 15: 
            { return AT;
            }
          case 61: break;
          case 16: 
            { return ASSIGNOP;
            }
          case 62: break;
          case 17: 
            { return ADD;
            }
          case 63: break;
          case 18: 
            { return COMMA;
            }
          case 64: break;
          case 19: 
            { return COLON;
            }
          case 65: break;
          case 20: 
            { return LPARAM;
            }
          case 66: break;
          case 21: 
            { return RPARAM;
            }
          case 67: break;
          case 22: 
            { return CONTENT;
            }yypushback
          case 68: break;
          case 23: 
            { return STRING;
            }
          case 69: break;
          case 24: 
            { return STARTCOMMAND;
            }
          case 70: break;
          case 25: 
            { return ENDCOMMAND;
            }
          case 71: break;
          case 26: 
            { return SUBASSIGN;
            }
          case 72: break;
          case 27: 
            { return DIVASSIGN;
            }
          case 73: break;
          case 28: 
            { return IF;
            }
          case 74: break;
          case 29: 
            { return AS;
            }
          case 75: break;
          case 30: 
            { return BY;
            }
          case 76: break;
          case 31: 
            { return EQUALEQUAL;
            }
          case 77: break;
          case 32: 
            { return ADDASSIGN;
            }
          case 78: break;
          case 33: 
            { return MULASSIGN;
            }
          case 79: break;
          case 34: 
            { return MODASSIGN;
            }
          case 80: break;
          case 35: 
            {
              if(yytext().toString().endsWith("{")){
                yypushback(1);
                yybegin(YYCONTENT);
                return CONTENT;
              }
              yypushback(4);
              yybegin(YYCOMMENT);
              return CONTENT;
            }
          case 81: break;
          case 36: 
            { return STRICTEQUAL;
            }
          case 82: break;
          case 37: 
            { yybegin(YYINITIAL); return COMMENT;
            }
          case 83: break;
          case 38: 
            { yybegin(YYCOMMENT);
            }
          case 84: break;
          case 39: 
            { return ELSE;
            }
          case 85: break;
          case 40: 
            { return LIST;
            }
          case 86: break;
          case 41: 
            { return THIS;
            }
          case 87: break;
          case 42: 
            { return TRUE;
            }
          case 88: break;
          case 43: 
            { return NULL;
            }
          case 89: break;
          case 44: 
            { return FALSE;
            }
          case 90: break;
          case 45: 
            { return ELSEIF;
            }
          case 91: break;
          case 46: 
            { return INCLUDE;
            }
          case 92: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
