/*
 *
 * Copyright 2017 Abner Zheng
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */


{
    parserClass = "com.netease.regular.lang.parser.RegularParser"
    parserUtilClass="com.netease.regular.lang.parser.RegularParserUtil"

    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"
    psiPackage = "com.netease.regular.lang.psi"
    psiImplPackage = "com.netease.regular.lang.psi.impl"
    psiClassPrefix = "Regular"

    elementTypeHolderClass = "com.netease.regular.lang.psi.RegularTypes"
    elementTypeClass = "com.netease.regular.lang.psi.RegularElementType"
    tokenTypeClass = "com.netease.regular.lang.psi.RegularTokenType"

//    psiImplUtilClass = "com.netease.regular.lang.parser.RegularParserUtil"
    tokens=[
        COMMENT = 'regexp:<!--([^-]|-[^-]|--+[^->])*-*-->'
        STRING =  "regexp:\"([^\"\\]|\\.)*\"|'([^'\\]|\\.)*'"
        LBRACE = '{'
        RBRACE = '}'
        LBRAKET = '['
        RBRAKET = ']'
        DOT = '.'
        space = 'regexp:\s+'
        STARTCOMMAND = '{#'
        ENDCOMMAND = '{/'
        IF = 'if'
        ELSE = 'else'
        ELSEIF = 'elseif'
        CONTENT = 'regexp:"[^"\{]*"'
        FILTEROP = '|'
        LIST = 'list'
        AS = 'as'
        AT = '@'
        BY = 'by'
        THIS = 'this'
        NULL = 'null'
        TRUE = 'true'
        FALSE = 'false'
        STRICTEQUAL = '==='
        EQUALEQUAL = '=='
        ASSIGNOP = '='
        ADDASSIGN = '+='
        SUBASSIGN = '-='
        MULASSIGN = '*='
        DIVASSIGN = '/='
        MODASSIGN = '%='
        ADD = '+'
        SUB = '-'
        SMALLER = '<'
        BIGGER = '>'
        SMALLEREQUAL = '<='
        BIGGEREQUAL = '>='
        NOTOP = '!'
        BITNOTOP = '~'
        ANDOP = '&&'
        OROP = '||'
        COMMA = ','
        COLON = ':'
        LPARAM = '('
        RPARAM = ')'
        INCLUDE = 'include'
        NUMBER = 'regexp:\d+'
        ID = 'regexp:[a-zA-Z]\w*'
    ]
}
file ::= statement*
statement ::= (CONTENT | ifExpr | listExpr | interpolationExpr | includeExpr | COMMENT)+

ifExpr ::= ifExprStart statement? elseifExpr? elseExpr? ENDCOMMAND IF RBRACE
ifExprStart ::= STARTCOMMAND IF expression RBRACE


elseExpr ::= STARTCOMMAND ELSE RBRACE statement?

elseifExpr ::= STARTCOMMAND ELSEIF expression RBRACE statement?

interpolationExpr ::= LBRACE expression  RBRACE

expression ::= bindOnceExpr | expr

listExpr ::=  STARTCOMMAND LIST expression (AS ID (BY expression)?)? RBRACE statement? ENDCOMMAND LIST RBRACE
bindOnceExpr ::= AT LPARAM expr RPARAM
includeExpr ::= STARTCOMMAND INCLUDE ID RBRACE


// regular

private expr ::= filter



filter::= assign (FILTEROP ID (COLON args)?)*


// assign ::=   condition
//            | left-hand-expr = condition

private assign ::= condition | leftHandExpr assignOperator condition

leftHandExpr ::= callExpr | member

callExpr ::= member LPARAM args? RPARAM callExprSuffix*

callExprSuffix ::= LPARAM args? RPARAM
                 | indexSuffix
                 | propertyReferenceSuffix
args ::= assign (COMMA assign)*

// conditon::= or ? assign : assign
//           | or
private condition ::= or '?' assign COLON assign
            | or

// or ::= and || or
//      | and
private or ::=  and '||' or | and

// and ::= equal && and
//       | equal
private and ::= equal '&&' and | equal

private equal ::= relation (equationOperator relation)*

equationOperator ::= '==' | '===' | '!=' | '!=='

private relation ::= additive (relationOperator additive)*

private additive ::= multive (addorsubOperator multive)*
private multive ::= unary (multOrDivOperator unary)*

private unary ::= unaryOperator unary | member
private member ::= primary memberSuffix*
private memberSuffix ::= indexSuffix | propertyReferenceSuffix | LPARAM args? RPARAM
private indexSuffix ::= LBRAKET expression RBRAKET
propertyReferenceSuffix ::= DOT ID


assignOperator ::= '=' | '+=' | '-=' | '*=' | '/=' | '%='
relationOperator ::= SMALLER | BIGGER | BIGGEREQUAL | SMALLEREQUAL
addorsubOperator ::= '+' | '-'
unaryOperator ::= '+' | '-' | '~' | '!'
multOrDivOperator::= '*' | '/'


/*
 * primary ::= this
 *           | ident
 *           | literal
 *           | array
 *           | object
 *           | ( expression )
 */

private primary ::= THIS | ID
             | literal | array
             | object | LPARAM expression RPARAM

private literal ::=   NULL | TRUE
            | FALSE
            | STRING
            | NUMBER

array ::= LBRAKET assign (COMMA assign)* RBRAKET

object ::= LBRACE propAssign (COMMA propAssign)* RBRACE

private propAssign ::=  prop COLON prop

private prop ::= NUMBER | ID | STRING
